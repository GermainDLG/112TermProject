from cmu_graphics import *
import math
import random
from Other_Maze import Maze
from collections import deque

#     SANDBOX FOR TESTING


l = [[1,2,3,4,5,8],
     [3,4,5,6,7,8],
     [9,0,1,2,3,8],
     [6,7,8,9,0,8],
     [1,3,5,7,9,8],
     [2,4,6,8,9,0]]
rows = len(l)
cols = len(l[0])
face1 = []
face2 = []
face3 = []
face4 = []
face5 = []
setRow = None
F1 = []
F2 = []
F3 = []
F4 = []
F5 = []

def getNum(bigList, startingRow, startingCol, endingRow, endingCol):
    tempRow = None
    tempList = []
    result = []
    for row in range(startingRow, endingRow+1):
        for col in range(startingCol, endingCol+1):
            if tempRow == None:
                tempRow = row
            if tempRow == row:
                tempList.append(bigList[row][col])
            elif tempRow != row:
                result.append(tempList)
                tempRow = row
                tempList = []
                tempList.append(bigList[row][col])
    result.append(tempList)
    return(result)

face1 = getNum(l, 0, 2, 1, 3)
face2 = getNum(l, 2, 0, 3, 1)
face3 = getNum(l, 2, 2, 3, 3)
print(face1)
print(face2)
print(face3)



# ON KEY PRESS STORAGE:

    # if(key == 'left'):
    #     app.currMaze = pastMaze.surrounding[1]
    #     for __ in range(abs(app.rotationCounter)):
    #         for maze in app.mazeList:
    #             if app.rotationCounter < 0:
    #                 maze.surrounding.append(maze.surrounding.pop(0))                    
    #             elif app.rotationCounter > 0:
    #                 maze.surrounding.insert(0,maze.surrounding.pop(-1))
    #     if 'right' in app.pastMove:
    #         for chunk in app.pastMove.split(' '):
    #             if chunk != 'right':
    #                 chunk = int(chunk)
    #                 for ___ in range(abs(chunk)):
    #                     for maze in app.mazeList:
    #                         if chunk < 0:
    #                             maze.surrounding.append(maze.surrounding.pop(0))
    #                         elif chunk > 0:
    #                             maze.surrounding.insert(0,maze.surrounding.pop(-1))
    #     app.pastMove = f'left {app.rotationCounter}'
    #     app.rotationCounter = 0
    # elif(key == 'up'):
    #     app.currMaze = pastMaze.surrounding[2]
    #     app.pastMove = 'up'
    #     app.rotationCounter += 1
    # elif(key == 'down'):
    #     app.currMaze = pastMaze.surrounding[0]
    #     app.rotationCounter -= 1
    #     app.pastMove = 'down'
    # elif(key == 'right'):
    #     app.currMaze = pastMaze.surrounding[3]
    #     for __ in range(abs(app.rotationCounter)):
    #         for maze in app.mazeList:
    #             if app.rotationCounter < 0:
    #                 maze.surrounding.insert(0,maze.surrounding.pop(-1))
    #             elif app.rotationCounter > 0:
    #                 maze.surrounding.append(maze.surrounding.pop(0))
    #     if 'left' in app.pastMove:
    #         print('here')
    #         for chunk in app.pastMove.split(' '):
    #             if chunk != "left":
    #                 chunk = int(chunk)
    #                 for ___ in range(abs(chunk)):
    #                     for maze in app.mazeList:
    #                         if chunk < 0:
    #                             maze.surrounding.insert(0,maze.surrounding.pop(-1))
    #                         elif chunk > 0:
    #                             maze.surrounding.append(maze.surrounding.pop(0))
    #     app.pastMove = f'right {app.rotationCounter}'
    #     app.rotationCounter = 0

#--------------------------------------------------------------------------------------------

#     def upLeftRotate(app, rotation, maze):
#     if rotation > 0:
#         maze.surrounding.insert(0,maze.surrounding.pop())
#     elif rotation < 0:
#         maze.surrounding.append(maze.surrounding.pop(0))

# def downRightRotate(app, rotation, maze):
#     if rotation > 0:
#         maze.surrounding.append(maze.surrounding.pop(0))
#     elif rotation < 0:
#         maze.surrounding.insert(0,maze.surrounding.pop())

    # #-------------------------------------------------
    # if(key == 'up'):
    #     if pastMaze.surrounding[2] == app.maze6:
    #         for sublist in app.possible6Surrounding:
    #             for __ in range(abs(app.totalRotation)):
    #                 if app.totalRotation > 0:
    #                     sublist.insert(0,sublist.pop())
    #                 elif app.totalRotation < 0:
    #                     sublist.append(sublist.pop(0))
    #         if pastMaze == app.maze1 or pastMaze == app.maze5:
    #             app.maze6.surrounding = app.possible6Surrounding[0]
    #         else:
    #             app.maze6.surrounding = app.possible6Surrounding[1]
    #         app.totalRotation = 0
    #     #-------------------------------------------------
    #     app.currMaze = pastMaze.surrounding[2]
    #     if(app.horizRotation != 0):
    #         for __ in range(abs(app.horizRotation)):
    #             for maze in app.mazeList:
    #                 upLeftRotate(app, app.horizRotation, maze)
    #         app.totalRotation += abs(app.horizRotation)
    #         app.horizRotation = 0
    #     app.vertRotation += 1
    #     #-------------------------------------------------
    # if(key == 'left'):
    #     if pastMaze.surrounding[1] == app.maze6:
    #         for sublist in app.possible6Surrounding:
    #             for ___ in range(abs(app.totalRotation)):
    #                 if app.totalRotation > 0:
    #                     sublist.insert(0,sublist.pop())
    #                 elif app.totalRotation < 0:
    #                     sublist.append(sublist.pop(0))
    #         if pastMaze == app.maze2 or pastMaze == app.maze4:
    #             app.maze6.surrounding = app.possible6Surrounding[1]
    #         else:
    #             app.maze6.surrounding = app.possible6Surrounding[0]
    #         app.totalRotation = 0
    #     #-------------------------------------------------
    #     app.currMaze = pastMaze.surrounding[1]
    #     if(app.vertRotation != 0):
    #         for __ in range(abs(app.vertRotation)):
    #             for maze in app.mazeList:
    #                 upLeftRotate(app, app.vertRotation, maze)
    #         app.totalRotation += abs(app.vertRotation)
    #         app.vertRotation = 0
    #     app.horizRotation -= 1
    #     #-------------------------------------------------
    # if(key == 'down'):
    #     if pastMaze.surrounding[0] == app.maze6:
    #         for sublist in app.possible6Surrounding:
    #             for ___ in range(abs(app.totalRotation)):
    #                 if app.totalRotation > 0:
    #                     sublist.insert(0,sublist.pop())
    #                 elif app.totalRotation < 0:
    #                     sublist.append(sublist.pop(0))
    #         if pastMaze == app.maze1 or pastMaze == app.maze5:
    #             app.maze6.surrounding = app.possible6Surrounding[0]
    #         else:
    #             app.maze6.surrounding = app.possible6Surrounding[1]
    #         app.totalRotation = 0
    #     #-------------------------------------------------
    #     app.currMaze = pastMaze.surrounding[0]
    #     if(app.horizRotation != 0):
    #         for __ in range(abs(app.horizRotation)):
    #             for maze in app.mazeList:
    #                 downRightRotate(app, app.horizRotation, maze)
    #         app.totalRotation -= abs(app.horizRotation)
    #         app.horizRotation = 0
    #     app.vertRotation -= 1
    #     #-------------------------------------------------
    # if(key == 'right'):
    #     if pastMaze.surrounding[3] == app.maze6:
    #         for sublist in app.possible6Surrounding:
    #             for ___ in range(abs(app.totalRotation)):
    #                 if app.totalRotation > 0:
    #                     sublist.insert(0,sublist.pop())
    #                 elif app.totalRotation < 0:
    #                     sublist.append(sublist.pop(0))
    #         if pastMaze == app.maze2 or pastMaze == app.maze4:
    #             app.maze6.surrounding = app.possible6Surrounding[1]
    #         else:
    #             app.maze6.surrounding = app.possible6Surrounding[0]
    #         app.totalRotation = 0
    #     #-------------------------------------------------
    #     app.currMaze = pastMaze.surrounding[3]
    #     if(app.vertRotation != 0):
    #         for __ in range(abs(app.vertRotation)):
    #             for maze in app.mazeList:
    #                 downRightRotate(app, app.vertRotation, maze)
    #         app.totalRotation -= abs(app.vertRotation)
    #         app.vertRotation = 0
    #     app.horizRotation += 1
    #     #-------------------------------------------------