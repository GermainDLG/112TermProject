from cmu_graphics import *
from Other_Maze import *



def onAppStart(app):
    app.width = 600
    app.height = 600
    app.rows = 5
    app.cols = 5
    app.maze1 = Maze(app.rows,app.cols)
    app.maze2 = Maze(app.rows,app.cols)
    app.maze3 = Maze(app.rows,app.cols)
    app.maze4 = Maze(app.rows,app.cols)
    app.maze5 = Maze(app.rows,app.cols)
    app.maze6 = Maze(app.rows,app.cols)
    mazeSetup(app.maze1)
    mazeSetup(app.maze2)
    mazeSetup(app.maze3)
    mazeSetup(app.maze4)
    mazeSetup(app.maze5)
    mazeSetup(app.maze6)
    app.maze1.surrounding = [app.maze3, app.maze2, app.maze6, app.maze4]
    app.maze2.surrounding = [app.maze3, app.maze5, app.maze6, app.maze1]
    app.maze3.surrounding = [app.maze5, app.maze2, app.maze1, app.maze4]
    app.maze4.surrounding = [app.maze3, app.maze1, app.maze6, app.maze5]
    app.maze5.surrounding = [app.maze3, app.maze4, app.maze6, app.maze2]
    app.maze6.surrounding = [app.maze1, app.maze2, app.maze5, app.maze4]
    app.mazeList = [app.maze1, app.maze2, app.maze3, app.maze4, app.maze5, app.maze6]
    app.currMaze = app.maze1
    app.rotationCounter = 0
    app.rotated = 0
    app.mazeFace = '1'

def testFunction(app):
    if app.currMaze == app.maze1:
        app.mazeFace = '1'
    elif app.currMaze == app.maze2:
        app.mazeFace = '2'
    elif app.currMaze == app.maze3:
        app.mazeFace = '3'
    elif app.currMaze == app.maze4:
        app.mazeFace = '4'
    elif app.currMaze == app.maze5:
        app.mazeFace = '5'
    elif app.currMaze == app.maze6:
        app.mazeFace = '6'

    
def mazeSetup(maze):
    maze.generateList()
    maze.generateMaze(set(),(0,0))

def drawMaze(app, maze):
    for row in range(app.rows):
        for col in range(app.cols):
            if(maze.list[row][col][2] == 1):
                drawLine(50 + (100*col),50 + (100*row),
                        150 + (100*col),50 + (100*row))
            if(maze.list[row][col][1] == 1):
                drawLine(50 + (100*col),50 + (100*row),
                        50 + (100*col),150 + (100*row))
            if(maze.list[row][col][0] == 1):
                drawLine(50 + (100*col), 150 + (100*row),
                         150 + (100*col), 150 + (100*row))
            if(maze.list[row][col][3] == 1):
                drawLine(150 + (100*col), 50 + (100*row),
                         150 + (100*col), 150 + (100*row))

def redrawAll(app):
    drawMaze(app, app.currMaze)
    drawLabel(app.mazeFace,300,575)

def onKeyPress(app, key):
    pastMaze = app.currMaze
    if(key == 'left'):
        app.currMaze = pastMaze.surrounding[1]
        app.rotated += app.rotationCounter
        for __ in range(abs(app.rotationCounter)):
            for maze in app.mazeList:
                if app.rotationCounter < 0:
                    maze.surrounding.append(maze.surrounding.pop(0))
                elif app.rotationCounter > 0:
                    maze.surrounding.insert(0,maze.surrounding.pop(-1))
        app.rotationCounter = 0
        app.pastMove = 'left'
    elif(key == 'up'):
        app.currMaze = pastMaze.surrounding[2]
        app.pastMove = 'up'
        #doesnt always increase rotation when going up (up-left vs up-right)
        #same with going down
        app.rotationCounter += 1
    elif(key == 'down'):
        app.currMaze = pastMaze.surrounding[0]
        app.rotationCounter -= 1
        app.pastMove = 'down'
    elif(key == 'right'):
        app.currMaze = pastMaze.surrounding[3]
        app.rotated += app.rotationCounter
        for __ in range(abs(app.rotationCounter)):
            for maze in app.mazeList:
                if app.rotationCounter < 0:
                    maze.surrounding.insert(0,maze.surrounding.pop(-1))
                elif app.rotationCounter > 0:
                    maze.surrounding.append(maze.surrounding.pop(0))
        app.rotationCounter = 0
        app.pastMove = 'right'
    print(app.rotated)
    testFunction(app)

def main():
    runApp()

main()