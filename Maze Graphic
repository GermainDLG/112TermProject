from cmu_graphics import *
from Other_Maze import *


def onAppStart(app):
    app.width = 600
    app.height = 600
    app.rows = 5
    app.cols = 5
    app.maze1 = Maze(app.rows,app.cols)
    app.maze2 = Maze(app.rows,app.cols)
    app.maze3 = Maze(app.rows,app.cols)
    app.maze4 = Maze(app.rows,app.cols)
    app.maze5 = Maze(app.rows,app.cols)
    app.maze6 = Maze(app.rows,app.cols)
    mazeSetup(app.maze1)
    mazeSetup(app.maze2)
    mazeSetup(app.maze3)
    mazeSetup(app.maze4)
    mazeSetup(app.maze5)
    mazeSetup(app.maze6)
    app.maze1.surrounding = [app.maze3, app.maze2, app.maze6, app.maze4]
    app.maze2.surrounding = [app.maze5, app.maze6, app.maze1, app.maze3]
    app.maze3.surrounding = [app.maze5, app.maze2, app.maze1, app.maze4]
    app.maze4.surrounding = [app.maze5, app.maze3, app.maze1, app.maze6]
    app.maze5.surrounding = [app.maze6, app.maze2, app.maze3, app.maze4]
    app.maze6.surrounding = [app.maze1, app.maze2, app.maze5, app.maze4]
    app.possible6Surrounding = [[app.maze1, app.maze2, app.maze5, app.maze4],
                                [app.maze5, app.maze4, app.maze1, app.maze2]]
    app.mazeList = [app.maze1, app.maze2, app.maze3, app.maze4, app.maze5, app.maze6]
    app.horizRotation = 0
    app.vertRotation = 0
    app.currMaze = app.maze3
    app.mazeFace = '3'
    app.mazeNumSurrounding = [5, 2, 1, 4]
    app.newSurrounding = []


def testFunction(app):
    if app.currMaze == app.maze1:
        app.mazeFace = '1'
    elif app.currMaze == app.maze2:
        app.mazeFace = '2'
    elif app.currMaze == app.maze3:
        app.mazeFace = '3'
    elif app.currMaze == app.maze4:
        app.mazeFace = '4'
    elif app.currMaze == app.maze5:
        app.mazeFace = '5'
    elif app.currMaze == app.maze6:
        app.mazeFace = '6'

def test2(app):
    app.mazeNumSurrounding = []
    counter = 0
    for i in range(4):
        for maze in app.mazeList:
            if maze == app.currMaze.surrounding[i]:
                app.mazeNumSurrounding.append(counter+1)
            counter += 1
        counter = 0

def mazeSetup(maze):
    maze.generateList()
    maze.generateMaze([],(0,0))

def drawMaze(app, maze):
    for row in range(app.rows):
        for col in range(app.cols):
            if(maze.list[row][col][2] == 1):
                drawLine(50 + (100*col),50 + (100*row),
                        150 + (100*col),50 + (100*row))
            if(maze.list[row][col][1] == 1):
                drawLine(50 + (100*col),50 + (100*row),
                        50 + (100*col),150 + (100*row))
            if(maze.list[row][col][0] == 1):
                drawLine(50 + (100*col), 150 + (100*row),
                         150 + (100*col), 150 + (100*row))
            if(maze.list[row][col][3] == 1):
                drawLine(150 + (100*col), 50 + (100*row),
                         150 + (100*col), 150 + (100*row))

def redrawAll(app):
    drawMaze(app, app.currMaze)
    drawLabel(app.mazeFace,300,575)
    drawLabel(app.mazeNumSurrounding, 300, 590)

def onKeyPress(app, key):
    direction = 0
    temp = app.currMaze
    if key == 'up':
        leftMaze = app.currMaze.surrounding[1]
        rightMaze = app.currMaze.surrounding[3]
        if leftMaze == app.maze6:
            leftMaze = app.possible6Surrounding[1]
            leftMaze.insert(0,leftMaze.pop())
        else: leftMaze.surrounding.insert(0,leftMaze.surrounding.pop())
        if rightMaze == app.maze6:
            rightMaze = app.possible6Surrounding[1]
            rightMaze.append(rightMaze.pop(0))
        else: rightMaze.surrounding.append(rightMaze.surrounding.pop(0))
        app.currMaze = temp.surrounding[2]
        app.maze6.surrounding = app.possible6Surrounding[0]
    elif key == 'down':
        leftMaze = app.currMaze.surrounding[1]
        rightMaze = app.currMaze.surrounding[3]
        if leftMaze == app.maze6:
            leftMaze = app.possible6Surrounding[1]
            leftMaze.append(leftMaze.pop(0))
        else: leftMaze.surrounding.append(leftMaze.surrounding.pop(0))
        if rightMaze == app.maze6:
            rightMaze = app.possible6Surrounding[1]
            rightMaze.insert(0,rightMaze.pop())
        else: rightMaze.surrounding.insert(0,rightMaze.surrounding.pop())
        app.currMaze = temp.surrounding[0]
        app.maze6.surrounding = app.possible6Surrounding[0]
    elif key == 'left':
        topMaze = app.currMaze.surrounding[2]
        bottomMaze = app.currMaze.surrounding[0]
        if topMaze == app.maze6:
            topMaze = app.possible6Surrounding[0]
            topMaze.append(topMaze.pop(0))
        else: topMaze.surrounding.append(topMaze.surrounding.pop(0))
        if bottomMaze == app.maze6:
            bottomMaze = app.possible6Surrounding[0]
            bottomMaze.insert(0,bottomMaze.pop())
        else: bottomMaze.surrounding.insert(0, bottomMaze.surrounding.pop())
        app.currMaze = temp.surrounding[1]
        app.maze6.surrounding = app.possible6Surrounding[1]
    elif key == 'right':
        topMaze = app.currMaze.surrounding[2]
        bottomMaze = app.currMaze.surrounding[0]
        if topMaze == app.maze6:
            topMaze = app.possible6Surrounding[0]
            topMaze.insert(0,topMaze.pop())
        else: topMaze.surrounding.insert(0, topMaze.surrounding.pop())
        if bottomMaze == app.maze6:
            bottomMaze = app.possible6Surrounding[0]
            bottomMaze.append(bottomMaze.pop(0))
        else: bottomMaze.surrounding.append(bottomMaze.surrounding.pop(0))
        app.currMaze = temp.surrounding[3]
        app.maze6.surrounding = app.possible6Surrounding[1]
    testFunction(app)
    test2(app)

def main():
    runApp()

main()




# def up(app, prevMaze):
#     app.currMaze = prevMaze.surrounding[2]
#     leftMaze = app.currMaze.surrounding[1]
#     rightMaze = app.currMaze.surrounding[3]
#     leftMaze.surrounding.insert(0,leftMaze.surrounding.pop()) #WATCH OUIT FOR 6
#     rightMaze.surrounding.append(rightMaze.surrounding.pop(0))

# def down(app,prevMaze):
#     app.currMaze = prevMaze.surrounding[0]
#     leftMaze = app.currMaze.surrounding[1]
#     rightMaze = app.currMaze.surrounding[3]
#     rightMaze.surrounding.insert(0,rightMaze.surrounding.pop()) #WATCH OUT FOR 6
#     leftMaze.surrounding.append(leftMaze.surrounding.pop(0))

# def left(app,prevMaze):
#     app.currMaze = prevMaze.surrounding[1]
#     topMaze = app.currMaze.surrounding[2]
#     bottomMaze = app.currMaze.surrounding[0]
#     topMaze.surrounding.append(topMaze.surrounding.pop(0))
#     bottomMaze.surrounding.insert(0,bottomMaze.surrounding.pop())

# def right(app,prevMaze):
#     app.currMaze = prevMaze.surrounding[3]
#     topMaze = app.currMaze.surrounding[2]
#     bottomMaze = app.currMaze.surrounding[0]
#     bottomMaze.surrounding.append(bottomMaze.surrounding.pop(0))
#     topMaze.surrounding.insert(0,topMaze.surrounding.pop())

# #WHICH WAY IS DIRECTIONALLY UP
# def onKeyPress(app, key): #REWRITE THIS TO FIND WHICHEVER ROTATION THE TWO FACES ARENT ON AND CHANGE THAT
#     prevMaze = app.currMaze
#     if key == 'up':
#         up(app, prevMaze)
#     elif key == 'down':
#         down(app, prevMaze)
#     elif key == 'left':
#         left(app, prevMaze)
#     elif key == 'right':
#         right(app,prevMaze)
#     testFunction(app)
#     test2(app)
