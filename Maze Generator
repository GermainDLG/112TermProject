from cmu_graphics import *
import math
import random


# INSPIRATION FROM: https://www.youtube.com/watch?v=jZQ31-4_8KM
class Maze:
    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.list = []
    
    def generateList(self):
        for i in range(self.height):
            self.list.append([])
        for emptylist in self.list:
            for j in range(self.width):
                emptylist.append([1,1,1,1]) # [bottom, left, top, right]
    
    # UNTESTED (CURRENT SUSPECT)
    def generateMaze(self, visited = 0, currPos = (0,0), pastDirection = None):
        directionList = [(1,0),(0,-1),(-1,0),(0,1)]
        rows, cols = len(self.list), len(self.list[0])
        if(visited == self.height * self.width):
            return None
        else:
            direction = random.randint(0,3) # 0-3: bottom, left, top, right
            drow, dcol = directionList[direction]
            while(not self.isValid(currPos,drow,dcol, pastDirection)):
                notValid.add(direction)
                direction = random.randint(0,3) # 0-3: bottom, left, top, right
                drow, dcol = directionList[direction]
                if(notValid == set(range(0,4))):
                    currPos = self.newPositionInMaze()
                    notValid = set()
                    pastDirection = None
            currRow, currCol = currPos
            self.list[currRow][currCol][direction] = 0
            visited += 1
            currRow += drow
            currCol += dcol
            currPos = (currCol, currRow)
            if(direction > 1):
                newDirection = direction-2
            else:
                newDirection = direction + 2
            self.list[currRow][currCol][newDirection] = 0
            return self.generateMaze(visited, currPos, newDirection)
        
    # SUSPECTED CRIMINAL
    def isValid(self, currPos, drow, dcol, pastDirection):
        goal = [1,1,1,1]
        if pastDirection != None:
            goal[pastDirection] = 0
        row, col = currPos
        row += drow
        col += dcol
        if((0 <= row < len(self.list)) and 
          (0 <= col < len(self.list[0])) and
          (self.list[row][col] == goal)):
          return True
        return False
    
    # WORKS
    def newPositionInMaze(self):
        rows, cols = len(self.list), len(self.list[0])
        for row in range(rows):
            for col in range(cols):
                if(self.list[row][col] == [1,1,1,1]):
                    return ((row,col))


    def __repr__(self):
        return f'{self.list}'

y = Maze(5,5)
y.generateList()
y.generateMaze()
print(y)
